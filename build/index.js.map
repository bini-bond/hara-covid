{"version":3,"sources":["../src/index.js"],"names":["debug","require","http","port","normalizePort","process","env","PORT","app","set","server","createServer","listen","console","log","on","onError","onListening","val","parseInt","isNaN","error","syscall","bind","code","exit","addr","address"],"mappings":";;AAMA;;AACA;;;;AACA;;;;;;AACA,IAAIA,QAAQC,QAAQ,OAAR,EAAiB,uBAAjB,CAAZ;;AAPA;;;;AAQA,IAAIC,OAAOD,QAAQ,MAAR,CAAX;;AAEA;;;;AAIA,IAAIE,OAAOC,cAAcC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,MAAlC,CAAX;AACAC,cAAIC,GAAJ,CAAQ,MAAR,EAAgBN,IAAhB;;AAEA;;;;AAIA,IAAIO,SAASR,KAAKS,YAAL,CAAkBH,aAAlB,CAAb;;AAEA;;;AAGA;AACAE,OAAOE,MAAP,CAAcT,IAAd,EAAoB,YAAM;AACxB;AACAU,UAAQC,GAAR,8BAAuCX,IAAvC;AACD,CAHD;;AAKAO,OAAOK,EAAP,CAAU,OAAV,EAAmBC,OAAnB;AACAN,OAAOK,EAAP,CAAU,WAAV,EAAuBE,WAAvB;;AAEA;;;;AAIA,SAASb,aAAT,CAAuBc,GAAvB,EAA4B;AAC1B,MAAIf,OAAOgB,SAASD,GAAT,EAAc,EAAd,CAAX;;AAEA,MAAIE,MAAMjB,IAAN,CAAJ,EAAiB;AACf;AACA,WAAOe,GAAP;AACD;;AAED,MAAIf,QAAQ,CAAZ,EAAe;AACb;AACA,WAAOA,IAAP;AACD;;AAED,SAAO,KAAP;AACD;;AAED;;;;AAIA,SAASa,OAAT,CAAiBK,KAAjB,EAAwB;AACtB,MAAIA,MAAMC,OAAN,KAAkB,QAAtB,EAAgC;AAC9B,UAAMD,KAAN;AACD;;AAED,MAAIE,OAAO,OAAOpB,IAAP,KAAgB,QAAhB,GAA2B,UAAUA,IAArC,GAA4C,UAAUA,IAAjE;;AAEA;AACA,UAAQkB,MAAMG,IAAd;AACE,SAAK,QAAL;AACEX,cAAQQ,KAAR,CAAcE,OAAO,+BAArB;AACAlB,cAAQoB,IAAR,CAAa,CAAb;AACA;AACF,SAAK,YAAL;AACEZ,cAAQQ,KAAR,CAAcE,OAAO,oBAArB;AACAlB,cAAQoB,IAAR,CAAa,CAAb;AACA;AACF;AACE,YAAMJ,KAAN;AAVJ;AAYD;;AAED;;;;AAIA,SAASJ,WAAT,GAAuB;AACrB,MAAIS,OAAOhB,OAAOiB,OAAP,EAAX;AACA,MAAIJ,OAAO,OAAOG,IAAP,KAAgB,QAAhB,GAA2B,UAAUA,IAArC,GAA4C,UAAUA,KAAKvB,IAAtE;AACAH,QAAM,kBAAkBuB,IAAxB;AACD","file":"index.js","sourcesContent":["\n\n/**\n * Module dependencies.\n */\n\nimport \"regenerator-runtime/runtime\";\nimport app from \"./app\";\nimport connectDatabase from \"./fs/conn\";\nvar debug = require(\"debug\")(\"author-edition:server\");\nvar http = require(\"http\");\n\n/**\n * Get port from environment and store in Express.\n */\n\nvar port = normalizePort(process.env.PORT || \"5000\");\napp.set(\"port\", port);\n\n/**\n * Create HTTP server.\n */\n\nvar server = http.createServer(app);\n\n/**\n * Listen on provided port, on all network interfaces.\n */\nconnectDatabase();\nserver.listen(port, () => {\n  // console.log(app);\n  console.log(`Server running on port [${port}]`);\n});\n\nserver.on(\"error\", onError);\nserver.on(\"listening\", onListening);\n\n/**\n * Normalize a port into a number, string, or false.\n */\n\nfunction normalizePort(val) {\n  var port = parseInt(val, 10);\n\n  if (isNaN(port)) {\n    // named pipe\n    return val;\n  }\n\n  if (port >= 0) {\n    // port number\n    return port;\n  }\n\n  return false;\n}\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\n\nfunction onError(error) {\n  if (error.syscall !== \"listen\") {\n    throw error;\n  }\n\n  var bind = typeof port === \"string\" ? \"Pipe \" + port : \"Port \" + port;\n\n  // handle specific listen errors with friendly messages\n  switch (error.code) {\n    case \"EACCES\":\n      console.error(bind + \" requires elevated privileges\");\n      process.exit(1);\n      break;\n    case \"EADDRINUSE\":\n      console.error(bind + \" is already in use\");\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n}\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\nfunction onListening() {\n  var addr = server.address();\n  var bind = typeof addr === \"string\" ? \"pipe \" + addr : \"port \" + addr.port;\n  debug(\"Listening on \" + bind);\n}\n"]}