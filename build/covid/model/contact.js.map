{"version":3,"sources":["../../../src/covid/model/contact.js"],"names":["contactSchema","mongoose","Schema","cid","type","String","required","uid","fistTS","Number","lastTS","medianDistance","statics","fetchContacts","find","r","insertContacts","contacts","Contact","insertMany","fetchAll","countContacts","countDocuments","counts","model"],"mappings":";;;;;;AA4DA;;;;;;2cA5DA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;AAKA,IAAMA,gBAAgB,IAAIC,mBAASC,MAAb,CAAoB;AACxCC,OAAK,EAAEC,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EADmC;AAExCC,OAAK,EAAEH,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EAFmC;AAGxCE,UAAQC,MAHgC;AAIxCC,UAAQD,MAJgC;AAKxCE,kBAAgBF;AALwB,CAApB,CAAtB;;AAQAT,cAAcY,OAAd,CAAsBC,aAAtB;AAAA,qEAAsC,iBAAeN,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACpB,KAAKO,IAAL,CAAU;AACxBP;AADwB,aAAV,CADoB;;AAAA;AAC9BQ,aAD8B;;AAAA,gBAKhCA,CALgC;AAAA;AAAA;AAAA;;AAAA,6CAM3B,CAN2B;;AAAA;AAAA,6CAQ7BA,CAR6B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtC;;AAAA;AAAA;AAAA;AAAA;;AAWAf,cAAcY,OAAd,CAAsBI,cAAtB;AAAA,sEAAuC,kBAAeC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACrBC,QAAQC,UAAR,CAAmBF,QAAnB,CADqB;;AAAA;AAC/BF,aAD+B;;AAAA,gBAGhCA,CAHgC;AAAA;AAAA;AAAA;;AAAA,8CAGtB,CAHsB;;AAAA;AAAA,8CAK9BA,CAL8B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvC;;AAAA;AAAA;AAAA;AAAA;;AAUAf,cAAcY,OAAd,CAAsBQ,QAAtB,2DAAiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACf,KAAKN,IAAL,EADe;;AAAA;AACzBC,WADyB;;AAAA,cAG3BA,CAH2B;AAAA;AAAA;AAAA;;AAAA,4CAItBA,CAJsB;;AAAA;AAAA,4CAMxBA,CANwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjC;;AASAf,cAAcY,OAAd,CAAsBS,aAAtB;AAAA,sEAAsC,kBAAgBd,GAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACf,KAAKe,cAAL,CAAoB;AACvCf;AADuC,aAApB,CADe;;AAAA;AAC9BgB,kBAD8B;AAAA,8CAK7BA,MAL6B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtC;;AAAA;AAAA;AAAA;AAAA;;AASA,IAAML,UAAUjB,mBAASuB,KAAT,CAAe,SAAf,EAA0BxB,aAA1B,CAAhB;;kBAEekB,O","file":"contact.js","sourcesContent":["// import {\n//   write,\n//   update,\n//   read,\n//   dbConnect,\n// } from '../../mongo';\n\n// import config from '../../config/config';\n\n\n// const COLNAME = 'words';\n\n// let db;\n\n// async function init() {\n//   db = await dbConnect(config);\n// }\n\n// init();\n\n// export async function fwriteWord(obj) {\n//   const param = {\n//     COLNAME,\n//     obj,\n//   };\n\n//   const res = await write(db, param);\n\n//   if (res.ops.length == 1) {\n//     return res.ops[0];\n//   }\n\n//   return res.ops;\n// }\n\n// export async function freadWord(query, fields) {\n//   const param = {\n//     COLNAME,\n//     query,\n//     fields,\n//   };\n\n//   const res = await read(db, param);\n\n//   return res;\n// }\n\n// export async function fupdateWord(query, obj) {\n//   const param = {\n//     COLNAME,\n//     query,\n//     obj,\n//   };\n\n//   await update(db, param);\n\n//   return 1;\n// }\n\n\nimport mongoose from \"mongoose\";\n\nconst contactSchema = new mongoose.Schema({\n  cid: { type: String, required: true },\n  uid: { type: String, required: true },\n  fistTS: Number,\n  lastTS: Number,\n  medianDistance: Number\n});\n\ncontactSchema.statics.fetchContacts = async function(uid) {\n  const r = await this.find({\n    uid\n  });\n  \n  if(!r)\n    return 0;\n\n  return r;\n};\n\ncontactSchema.statics.insertContacts = async function(contacts) {\n  const r = await Contact.insertMany(contacts);\n\n  if (!r) return 0;\n\n  return r;\n};\n\n\n\ncontactSchema.statics.fetchAll = async function () {\n  const r = await this.find();\n\n  if(!r)\n    return r;\n\n  return r;\n}\n\ncontactSchema.statics.countContacts = async function (uid) {\n  const counts = await this.countDocuments({\n    uid\n  });\n\n  return counts;\n}\n\n\nconst Contact = mongoose.model(\"contact\", contactSchema);\n\nexport default Contact;\n"]}