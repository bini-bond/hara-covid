{"version":3,"sources":["../../../src/covid/model/user.js"],"names":["mongoose","require","userSchema","Schema","phone","type","String","unique","required","uid","profile","name","statics","findUser","findOne","u","findUserByPhone","findUserByBID","bid","count","filters","User","countDocuments","removeUser","email","findOneAndRemove","r","model","module","exports"],"mappings":";;;;AAAA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;;AAEA,IAAMC,aAAa,IAAIF,SAASG,MAAb,CAAoB;AACrCC,SAAO,EAAEC,MAAMC,MAAR,EAAgBC,QAAQ,IAAxB,EAA8BC,UAAU,IAAxC,EAD8B;AAErCC,OAAK,EAACJ,MAAMC,MAAP,EAAeC,QAAQ,IAAvB,EAA6BC,UAAU,IAAvC,EAFgC;AAGrCE,WAAS;AACPC,UAAML;AADC;AAH4B,CAApB,CAAnB;;AASAJ,WAAWU,OAAX,CAAmBC,QAAnB;AAAA,qEAA8B,iBAAgBJ,GAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACZ,KAAKK,OAAL,CAAa;AAC3BL;AAD2B,aAAb,CADY;;AAAA;AACtBM,aADsB;AAAA,6CAKrBA,CALqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA9B;;AAAA;AAAA;AAAA;AAAA;;AAQAb,WAAWU,OAAX,CAAmBI,eAAnB;AAAA,sEAAqC,kBAAeZ,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACnB,KAAKU,OAAL,CAAa;AAC3BV;AAD2B,aAAb,CADmB;;AAAA;AAC7BW,aAD6B;AAAA,8CAK5BA,CAL4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArC;;AAAA;AAAA;AAAA;AAAA;;AAQAb,WAAWU,OAAX,CAAmBK,aAAnB;AAAA,sEAAmC,kBAAeC,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACjB,KAAKJ,OAAL,CAAa;AAC3BI;AAD2B,aAAb,CADiB;;AAAA;AAC3BH,aAD2B;AAAA,8CAK1BA,CAL0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnC;;AAAA;AAAA;AAAA;AAAA;;AAQA;AACA;AACA;AACA;;AAEAb,WAAWU,OAAX,CAAmBO,KAAnB;AAAA,sEAA2B,kBAAgBC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACLC,KAAKC,cAAL,CAAoBF,OAApB,CADK;;AAAA;AACnBD,iBADmB;AAAA,8CAGlBA,KAHkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;;AAAA;AAAA;AAAA;AAAA;;AAOAjB,WAAWU,OAAX,CAAmBW,UAAnB;AAAA,sEAAgC,kBAAgBC,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACd,KAAKC,gBAAL,CAAsB,EAACD,YAAD,EAAtB,CADc;;AAAA;AACxBE,aADwB;;AAAA,gBAE1BA,CAF0B;AAAA;AAAA;AAAA;;AAAA,8CAEhB,CAFgB;;AAAA;AAAA,8CAIvB,CAJuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhC;;AAAA;AAAA;AAAA;AAAA;;AASA,IAAML,OAAOrB,SAAS2B,KAAT,CAAe,MAAf,EAAuBzB,UAAvB,CAAb;;AAEA0B,OAAOC,OAAP,GAAiBR,IAAjB","file":"user.js","sourcesContent":["const mongoose = require(\"mongoose\");\n\nconst userSchema = new mongoose.Schema({\n  phone: { type: String, unique: true, required: true },\n  uid: {type: String, unique: true, required: true},\n  profile: {\n    name: String\n  }\n});\n\n\nuserSchema.statics.findUser = async function (uid) {\n  const u = await this.findOne({\n    uid\n  });\n\n  return u\n}\n\nuserSchema.statics.findUserByPhone = async function(phone) {\n  const u = await this.findOne({\n    phone,\n  });\n\n  return u;\n};\n\nuserSchema.statics.findUserByBID = async function(bid) {\n  const u = await this.findOne({\n    bid\n  });\n\n  return u;\n};\n\n// userSchema.statics.fetchUsers = async function () {\n//   const u = await this.find({}).select({profile: true, email: true, role: true});\n//   return u;\n// };\n\nuserSchema.statics.count = async function (filters) {\n  const count = await User.countDocuments(filters);\n\n  return count;\n}\n\n\nuserSchema.statics.removeUser = async function (email){\n  const r = await this.findOneAndRemove({email});\n  if(!r) return 0;\n\n  return 1;\n}\n\n\n\nconst User = mongoose.model(\"User\", userSchema);\n\nmodule.exports = User;\n"]}